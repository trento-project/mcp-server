{
  "openapi": "3.0.0",
  "info": {
    "contact": {
      "email": "trento-project@suse.com",
      "name": "Trento Project",
      "url": "https://www.trento-project.io"
    },
    "description": "Wanda is an open source platform for automated cluster checks, health monitoring, and remediation. It provides APIs for managing checks, executions, customizations, and integrations with the Trento Platform. Wanda helps ensure high availability and reliability for your infrastructure by automating best practices and compliance checks.",
    "license": {
      "name": "Apache 2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0"
    },
    "title": "Wanda",
    "version": "1.5.0"
  },
  "servers": [
    {
      "description": "This is the Trento demo server, provided for testing and demonstration purposes.",
      "url": "https://demo.trento-project.io",
      "variables": {}
    }
  ],
  "tags": [
    {
      "description": "Endpoints for managing and executing checks, including configuration and results retrieval.",
      "name": "Checks Engine",
      "x-displayName": "Checks Engine"
    },
    {
      "description": "Endpoints for accessing checks/operations platform features.",
      "name": "Checks/Operations Platform",
      "x-displayName": "Checks/Operations Platform"
    },
    {
      "description": "Exposes endpoints as tools for Model Context Protocol (MCP) integration, enabling those endpoints to be consumed by any LLM.",
      "name": "MCP",
      "x-displayName": "MCP"
    },
    {
      "description": "Endpoints for managing and executing operations and related information.",
      "name": "Operations Engine",
      "x-displayName": "Operations Engine"
    }
  ],
  "paths": {
    "/api/healthz": {
      "get": {
        "callbacks": {},
        "description": "This endpoint returns the health status of the checks/operations platform, including database connectivity and overall system readiness.",
        "operationId": "WandaWeb.HealthController.health",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Health"
                }
              }
            },
            "description": "This response provides the current health status of the checks/operations platform, including database connectivity."
          }
        },
        "security": [],
        "summary": "Wanda health.",
        "tags": [
          "Checks/Operations Platform"
        ]
      }
    },
    "/api/readyz": {
      "get": {
        "callbacks": {},
        "description": "This endpoint checks if the checks/operations platform is ready to accept requests and operate normally.",
        "operationId": "WandaWeb.HealthController.ready",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Ready"
                }
              }
            },
            "description": "This response confirms that the checks/operations platform is ready for operation."
          }
        },
        "security": [],
        "summary": "Wanda ready.",
        "tags": [
          "Checks/Operations Platform"
        ]
      }
    },
    "/api/v1/checks/catalog": {
      "get": {
        "callbacks": {},
        "description": "Provides the catalog of checks that can be executed in the system for improved reliability and compliance.",
        "operationId": "WandaWeb.V1.CatalogController.catalog",
        "parameters": [
          {
            "description": "Specify environment variables to filter or customize the returned catalog of checks.",
            "example": {
              "SOME_ENV": "value"
            },
            "explode": true,
            "in": "query",
            "name": "env",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/v1_ExecutionEnv"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1_CatalogResponse"
                }
              }
            },
            "description": "A successful response containing the catalog of available checks."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1_UnprocessableEntity"
                }
              }
            },
            "description": "A detailed error response indicating that the server cannot process the request due to semantic errors, such as invalid or missing values in the payload."
          }
        },
        "summary": "List checks catalog.",
        "tags": [
          "Checks Engine",
          "MCP"
        ],
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/api/v1/checks/executions": {
      "get": {
        "callbacks": {},
        "description": "Provides a paginated list of executions performed in the system, supporting monitoring and analysis.",
        "operationId": "WandaWeb.V1.ExecutionController.index",
        "parameters": [
          {
            "description": "The unique identifier of the group to filter the executions list.",
            "example": "c1a2b3c4-d5e6-7890-abcd-ef1234567890",
            "in": "query",
            "name": "group_id",
            "required": false,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Specify the page number to retrieve paginated results for executions.",
            "example": 3,
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Set the number of items to be returned per page in the paginated results.",
            "example": 20,
            "in": "query",
            "name": "items_per_page",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1_ListExecutionsResponse"
                }
              }
            },
            "description": "A successful response containing a paginated list of executions."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1_UnprocessableEntity"
                }
              }
            },
            "description": "A detailed error response indicating that the server cannot process the request due to semantic errors, such as invalid or missing values in the payload."
          }
        },
        "summary": "List executions.",
        "tags": [
          "Checks Engine",
          "MCP"
        ],
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/api/v1/checks/executions/start": {
      "post": {
        "callbacks": {},
        "description": "Initiates a new checks execution on the target infrastructure, enabling automated validation.",
        "operationId": "WandaWeb.V1.ExecutionController.start",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/v1_StartExecutionRequest"
              }
            }
          },
          "description": "The context required to start a new execution, including necessary parameters.",
          "required": false
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1_AcceptedExecutionResponse"
                }
              }
            },
            "description": "A successful response indicating the execution was accepted and started."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1_BadRequest"
                }
              }
            },
            "description": "This response indicates that the request was malformed or contained invalid parameters, and could not be processed."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1_UnprocessableEntity"
                }
              }
            },
            "description": "A detailed error response indicating that the server cannot process the request due to semantic errors, such as invalid or missing values in the payload."
          }
        },
        "summary": "Start a Checks Execution.",
        "tags": [
          "Checks Engine"
        ],
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/api/v1/checks/executions/{id}": {
      "get": {
        "callbacks": {},
        "description": "Provides detailed information about a specific execution identified by its ID.",
        "operationId": "WandaWeb.V1.ExecutionController.show",
        "parameters": [
          {
            "description": "The unique identifier of the execution to retrieve details for.",
            "example": "c1a2b3c4-d5e6-7890-abcd-ef1234567890",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1_ExecutionResponse"
                }
              }
            },
            "description": "A successful response containing details of the requested execution."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1_NotFound"
                }
              }
            },
            "description": "This response indicates that the requested resource could not be found in the system."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1_UnprocessableEntity"
                }
              }
            },
            "description": "A detailed error response indicating that the server cannot process the request due to semantic errors, such as invalid or missing values in the payload."
          }
        },
        "summary": "Get an execution by ID.",
        "tags": [
          "Checks Engine",
          "MCP"
        ],
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/api/v1/checks/groups/{id}/executions/last": {
      "get": {
        "callbacks": {},
        "description": "Provides details about the most recent execution for a specified group.",
        "operationId": "WandaWeb.V1.ExecutionController.last",
        "parameters": [
          {
            "description": "The unique identifier of the group for which the last execution is requested.",
            "example": "c1a2b3c4-d5e6-7890-abcd-ef1234567890",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1_ExecutionResponse"
                }
              }
            },
            "description": "A successful response containing details of the last execution for the specified group."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1_NotFound"
                }
              }
            },
            "description": "This response indicates that the requested resource could not be found in the system."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1_UnprocessableEntity"
                }
              }
            },
            "description": "A detailed error response indicating that the server cannot process the request due to semantic errors, such as invalid or missing values in the payload."
          }
        },
        "summary": "Get the last execution of a group.",
        "tags": [
          "Checks Engine",
          "MCP"
        ],
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/api/v1/groups/{group_id}/checks": {
      "get": {
        "callbacks": {},
        "description": "Provides a list of selectable checks for a specified group and environment, enabling targeted execution.",
        "operationId": "WandaWeb.V1.CatalogController.selectable_checks",
        "parameters": [
          {
            "description": "The unique identifier of the group for which selectable checks are to be listed.",
            "example": "c1a2b3c4-d5e6-7890-abcd-ef1234567890",
            "in": "path",
            "name": "group_id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Specify environment variables to filter or customize the selectable checks returned.",
            "explode": true,
            "in": "query",
            "name": "env",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/v1_ExecutionEnv"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1_SelectableChecksResponse"
                }
              }
            },
            "description": "A successful response containing the selectable checks for the specified group and environment."
          }
        },
        "summary": "List selectable checks for a given execution group and environment.",
        "tags": [
          "Checks Engine",
          "MCP"
        ],
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/api/v1/groups/{group_id}/checks/{check_id}/customization": {
      "delete": {
        "callbacks": {},
        "description": "Removes all previously applied customizations for a check in a specific group, restoring default values.",
        "operationId": "WandaWeb.V1.ChecksCustomizationsController.reset_customization",
        "parameters": [
          {
            "description": "The unique identifier of the check for which the customization is being reset.",
            "example": "ABC123",
            "in": "path",
            "name": "check_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The unique identifier of the group for which the check's customization is being reset.",
            "example": "c1a2b3c4-d5e6-7890-abcd-ef1234567890",
            "in": "path",
            "name": "group_id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "A successful response indicating the customization was reset and defaults restored."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1_NotFound"
                }
              }
            },
            "description": "This response indicates that the requested resource could not be found in the system."
          }
        },
        "summary": "Reset the customizations applied for a specific check.",
        "tags": [
          "Checks Engine"
        ],
        "security": [
          {
            "authorization": []
          }
        ]
      },
      "post": {
        "callbacks": {},
        "description": "Allows users to apply custom values to a specific check for a selected group, enabling tailored validation.",
        "operationId": "WandaWeb.V1.ChecksCustomizationsController.apply_custom_values",
        "parameters": [
          {
            "description": "The unique identifier of the check to which custom values are being applied.",
            "example": "ABC123",
            "in": "path",
            "name": "check_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The unique identifier of the group for which the custom value is being set.",
            "example": "c1a2b3c4-d5e6-7890-abcd-ef1234567890",
            "in": "path",
            "name": "group_id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/v1_CustomizationRequest"
              }
            }
          },
          "description": "The custom values to be applied to the specified check.",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1_CustomizationResponse"
                }
              }
            },
            "description": "A successful response containing the applied customizations for the specified check and group."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1_BadRequest"
                }
              }
            },
            "description": "This response indicates that the request was malformed or contained invalid parameters, and could not be processed."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1_Forbidden"
                }
              }
            },
            "description": "This response indicates that access to the requested resource or operation is forbidden due to insufficient permissions."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1_NotFound"
                }
              }
            },
            "description": "This response indicates that the requested resource could not be found in the system."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1_UnprocessableEntity"
                }
              }
            },
            "description": "A detailed error response indicating that the server cannot process the request due to semantic errors, such as invalid or missing values in the payload."
          }
        },
        "summary": "Apply custom values for a specific check.",
        "tags": [
          "Checks Engine"
        ],
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/api/v1/operations/executions": {
      "get": {
        "callbacks": {},
        "description": "Provides a paginated list of operations performed in the system, allowing for easy tracking and management.",
        "operationId": "WandaWeb.V1.OperationController.index",
        "parameters": [
          {
            "description": "The unique identifier of the group to filter the operations list.",
            "example": "c1a2b3c4-d5e6-7890-abcd-ef1234567890",
            "in": "query",
            "name": "group_id",
            "required": false,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Specify the page number to retrieve paginated results for operations.",
            "example": 3,
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Set the number of items to be returned per page in the paginated results.",
            "example": 20,
            "in": "query",
            "name": "items_per_page",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Filter the operations by their status, using one of the allowed values.",
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "enum": [
                "running",
                "completed",
                "aborted"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1_ListOperationsResponse"
                }
              }
            },
            "description": "A successful response containing a paginated list of operations."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1_UnprocessableEntity"
                }
              }
            },
            "description": "A detailed error response indicating that the server cannot process the request due to semantic errors, such as invalid or missing values in the payload."
          }
        },
        "summary": "List operations.",
        "tags": [
          "Operations Engine",
          "MCP"
        ],
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/api/v1/operations/executions/{id}": {
      "get": {
        "callbacks": {},
        "description": "Provides detailed information about a specific operation identified by its UUID.",
        "operationId": "WandaWeb.V1.OperationController.show",
        "parameters": [
          {
            "description": "The unique identifier (UUID) of the operation to retrieve details for.",
            "example": "c1a2b3c4-d5e6-7890-abcd-ef1234567890",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1_OperationResponse"
                }
              }
            },
            "description": "A successful response containing details of the requested operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1_NotFound"
                }
              }
            },
            "description": "This response indicates that the requested resource could not be found in the system."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1_UnprocessableEntity"
                }
              }
            },
            "description": "A detailed error response indicating that the server cannot process the request due to semantic errors, such as invalid or missing values in the payload."
          }
        },
        "summary": "Get an operation by ID.",
        "tags": [
          "Operations Engine",
          "MCP"
        ],
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/api/v2/checks/catalog": {
      "get": {
        "callbacks": {},
        "description": "Provides the catalog of checks that can be executed in the system for improved reliability and compliance.",
        "operationId": "WandaWeb.V2.CatalogController.catalog",
        "parameters": [
          {
            "description": "Specify environment variables to filter or customize the returned catalog of checks.",
            "explode": true,
            "in": "query",
            "name": "env",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/v2_ExecutionEnv"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v2_CatalogResponse"
                }
              }
            },
            "description": "A successful response containing the catalog of available checks."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v2_UnprocessableEntity"
                }
              }
            },
            "description": "A detailed error response indicating that the server cannot process the request due to semantic errors, such as invalid or missing values in the payload."
          }
        },
        "summary": "List checks catalog.",
        "tags": [
          "Checks Engine",
          "MCP"
        ],
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/api/v2/checks/executions": {
      "get": {
        "callbacks": {},
        "description": "Provides a paginated list of executions performed in the system, supporting monitoring and analysis.",
        "operationId": "WandaWeb.V2.ExecutionController.index",
        "parameters": [
          {
            "description": "The unique identifier of the group to filter the executions list.",
            "example": "c1a2b3c4-d5e6-7890-abcd-ef1234567890",
            "in": "query",
            "name": "group_id",
            "required": false,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Specify the page number to retrieve paginated results for executions.",
            "example": 3,
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Set the number of items to be returned per page in the paginated results.",
            "example": 20,
            "in": "query",
            "name": "items_per_page",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v2_ListExecutionsResponse"
                }
              }
            },
            "description": "A successful response containing a paginated list of executions."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v2_UnprocessableEntity"
                }
              }
            },
            "description": "A detailed error response indicating that the server cannot process the request due to semantic errors, such as invalid or missing values in the payload."
          }
        },
        "summary": "List executions.",
        "tags": [
          "Checks Engine",
          "MCP"
        ],
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/api/v2/checks/executions/start": {
      "post": {
        "callbacks": {},
        "description": "Initiates a new checks execution on the target infrastructure, enabling automated validation.",
        "operationId": "WandaWeb.V2.ExecutionController.start",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/v2_StartExecutionRequest"
              }
            }
          },
          "description": "The context required to start a new execution, including necessary parameters.",
          "required": false
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v2_AcceptedExecutionResponse"
                }
              }
            },
            "description": "A successful response indicating the execution was accepted and started."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v2_BadRequest"
                }
              }
            },
            "description": "This response indicates that the request was malformed or contained invalid parameters, and could not be processed."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v2_UnprocessableEntity"
                }
              }
            },
            "description": "A detailed error response indicating that the server cannot process the request due to semantic errors, such as invalid or missing values in the payload."
          }
        },
        "summary": "Start a Checks Execution.",
        "tags": [
          "Checks Engine"
        ],
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/api/v2/checks/executions/{id}": {
      "get": {
        "callbacks": {},
        "description": "Provides detailed information about a specific execution identified by its ID.",
        "operationId": "WandaWeb.V2.ExecutionController.show",
        "parameters": [
          {
            "description": "The unique identifier of the execution to retrieve details for.",
            "example": "c1a2b3c4-d5e6-7890-abcd-ef1234567890",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v2_ExecutionResponse"
                }
              }
            },
            "description": "A successful response containing details of the requested execution."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v2_NotFound"
                }
              }
            },
            "description": "This response indicates that the requested resource could not be found in the system."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v2_UnprocessableEntity"
                }
              }
            },
            "description": "A detailed error response indicating that the server cannot process the request due to semantic errors, such as invalid or missing values in the payload."
          }
        },
        "summary": "Get an execution by ID.",
        "tags": [
          "Checks Engine",
          "MCP"
        ],
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/api/v2/checks/groups/{id}/executions/last": {
      "get": {
        "callbacks": {},
        "description": "Provides details about the most recent execution for a specified group.",
        "operationId": "WandaWeb.V2.ExecutionController.last",
        "parameters": [
          {
            "description": "The unique identifier of the group for which the last execution is requested.",
            "example": "c1a2b3c4-d5e6-7890-abcd-ef1234567890",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v2_ExecutionResponse"
                }
              }
            },
            "description": "A successful response containing details of the last execution for the specified group."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v2_NotFound"
                }
              }
            },
            "description": "This response indicates that the requested resource could not be found in the system."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v2_UnprocessableEntity"
                }
              }
            },
            "description": "A detailed error response indicating that the server cannot process the request due to semantic errors, such as invalid or missing values in the payload."
          }
        },
        "summary": "Get the last execution of a group.",
        "tags": [
          "Checks Engine",
          "MCP"
        ],
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/api/v3/checks/catalog": {
      "get": {
        "callbacks": {},
        "description": "Provides the catalog of checks that can be executed in the system for improved reliability and compliance.",
        "operationId": "WandaWeb.V3.CatalogController.catalog",
        "parameters": [
          {
            "description": "Specify environment variables to filter or customize the returned catalog of checks.",
            "explode": true,
            "in": "query",
            "name": "env",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/v3_ExecutionEnv"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v3_CatalogResponse"
                }
              }
            },
            "description": "A successful response containing the catalog of available checks."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v3_UnprocessableEntity"
                }
              }
            },
            "description": "A detailed error response indicating that the server cannot process the request due to semantic errors, such as invalid or missing values in the payload."
          }
        },
        "summary": "List checks catalog.",
        "tags": [
          "Checks Engine",
          "MCP"
        ],
        "security": [
          {
            "authorization": []
          }
        ]
      }
    }
  },
  "components": {
    "responses": {},
    "schemas": {
      "Health": {
        "additionalProperties": false,
        "description": "This response provides the health status of the checks/operations platform platform, including the status of its database connection.",
        "example": {
          "database": "pass"
        },
        "properties": {
          "database": {
            "description": "This field shows the current status of the database connection for the checks/operations platform platform.",
            "enum": [
              "pass",
              "fail"
            ],
            "example": "pass",
            "type": "string"
          }
        },
        "title": "Health",
        "type": "object"
      },
      "Ready": {
        "additionalProperties": false,
        "description": "This response provides the readiness status of the checks/operations platform, indicating whether it is ready to accept requests.",
        "example": {
          "ready": true
        },
        "properties": {
          "ready": {
            "description": "Indicates whether the Trento Web platform is ready to accept requests and operate normally.",
            "type": "boolean"
          }
        },
        "title": "Ready",
        "type": "object"
      },
      "v1_AcceptedExecutionResponse": {
        "additionalProperties": false,
        "description": "This response contains the identifiers for an execution that was recently accepted by the system. These identifiers can be used to query the execution status later.",
        "example": {
          "execution_id": "e1a2b3c4-d5f6-7890-abcd-1234567890ab",
          "group_id": "353fd789-d8ae-4a1b-a9f9-3919bd773e79"
        },
        "properties": {
          "execution_id": {
            "format": "uuid",
            "type": "string"
          },
          "group_id": {
            "format": "uuid",
            "type": "string"
          }
        },
        "title": "AcceptedExecutionResponse",
        "type": "object"
      },
      "v1_AgentCheckError": {
        "additionalProperties": false,
        "description": "Indicates that some facts could not be gathered on a specific agent due to issues such as gathering failure or timeout. This error provides context for troubleshooting agent data collection problems.",
        "example": {
          "agent_id": "a1b2c3d4-e5f6-7890-abcd-1234567890ab",
          "facts": [
            {
              "check_id": "156F64",
              "name": "node_count",
              "value": 3
            },
            {
              "check_id": "156F64",
              "message": "Timeout",
              "name": "node_count",
              "type": "gathering_error"
            }
          ],
          "message": "Timeout while gathering facts",
          "type": "gathering_error"
        },
        "properties": {
          "agent_id": {
            "description": "The unique identifier of the agent involved in the error.",
            "format": "uuid",
            "type": "string"
          },
          "facts": {
            "description": "Facts gathered from the target agent, which may include errors encountered during the data collection process.",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/v1_Fact"
                },
                {
                  "$ref": "#/components/schemas/v1_FactError"
                }
              ]
            },
            "nullable": true,
            "type": "array"
          },
          "message": {
            "description": "A detailed message describing the error encountered during fact gathering on the agent.",
            "type": "string"
          },
          "type": {
            "description": "The type of error encountered during fact gathering on the agent.",
            "type": "string"
          }
        },
        "required": [
          "agent_id",
          "type",
          "message"
        ],
        "title": "AgentCheckError",
        "type": "object"
      },
      "v1_AgentCheckResult": {
        "additionalProperties": false,
        "description": "Represents the result of a check performed on a specific agent, including gathered facts and expectation evaluations.",
        "example": {
          "agent_id": "a1b2c3d4-e5f6-7890-abcd-1234567890ab",
          "expectation_evaluations": [
            {
              "name": "fencing_enabled",
              "return_value": true,
              "type": "expect"
            }
          ],
          "facts": [
            {
              "check_id": "156F64",
              "name": "node_count",
              "value": 3
            }
          ],
          "values": [
            {
              "check_id": "156F64",
              "customized": false,
              "name": "fencing_configured",
              "value": true
            }
          ]
        },
        "properties": {
          "agent_id": {
            "description": "The unique identifier of the agent for which the check was performed.",
            "format": "uuid",
            "type": "string"
          },
          "expectation_evaluations": {
            "description": "Result of the single expectation evaluation, indicating whether the expectation was met for the agent's check.",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/v1_ExpectationEvaluation"
                },
                {
                  "$ref": "#/components/schemas/v1_ExpectationEvaluationError"
                }
              ]
            },
            "type": "array"
          },
          "facts": {
            "description": "Facts gathered from the target agent during the check execution.",
            "items": {
              "$ref": "#/components/schemas/v1_Fact"
            },
            "type": "array"
          },
          "values": {
            "description": "Values resolved for the current execution, representing the computed results for the agent's check.",
            "items": {
              "$ref": "#/components/schemas/v1_Value"
            },
            "type": "array"
          }
        },
        "required": [
          "agent_id",
          "facts",
          "expectation_evaluations"
        ],
        "title": "AgentCheckResult",
        "type": "object"
      },
      "v1_AgentReport": {
        "additionalProperties": false,
        "description": "Represents an individual agent report of an operation, including agent identification, result, state differences, and error messages.",
        "example": {
          "agent_id": "a1b2c3d4-e5f6-7890-abcd-1234567890ab",
          "diff": {
            "after": "present",
            "before": "absent"
          },
          "error_message": "",
          "result": "updated"
        },
        "properties": {
          "agent_id": {
            "description": "The unique identifier of the agent for which the report is generated.",
            "format": "uuid",
            "type": "string"
          },
          "diff": {
            "additionalProperties": false,
            "description": "The difference in the agent's state before and after the operation, useful for tracking changes.",
            "nullable": true,
            "properties": {
              "after": {
                "description": "The state of the agent after applying the operation, showing the result of the change.",
                "type": "string"
              },
              "before": {
                "description": "The state of the agent before applying the operation, providing context for the change.",
                "type": "string"
              }
            },
            "required": [
              "before",
              "after"
            ],
            "type": "object"
          },
          "error_message": {
            "description": "A detailed error message in case the operation failed for the agent, providing troubleshooting information.",
            "nullable": true,
            "type": "string"
          },
          "result": {
            "enum": [
              "updated",
              "not_updated",
              "failed",
              "rolled_back",
              "timeout",
              "skipped",
              "not_executed"
            ],
            "type": "string"
          }
        },
        "required": [
          "agent_id",
          "result",
          "diff",
          "error_message"
        ],
        "title": "AgentReport",
        "type": "object"
      },
      "v1_BadRequest": {
        "additionalProperties": false,
        "description": "This response indicates that the request was malformed or contained invalid parameters, and could not be processed.",
        "example": {
          "errors": [
            {
              "detail": "Invalid request payload.",
              "title": "Bad Request"
            }
          ]
        },
        "properties": {
          "errors": {
            "example": [
              {
                "detail": "Invalid request payload.",
                "title": "Bad Request"
              }
            ],
            "items": {
              "properties": {
                "detail": {
                  "example": "Invalid request payload.",
                  "type": "string"
                },
                "title": {
                  "example": "Bad Request",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "title": "BadRequest",
        "type": "object"
      },
      "v1_CatalogResponse": {
        "additionalProperties": false,
        "description": "Represents the response for a catalog listing, including a list of catalog checks and their details.",
        "example": {
          "items": [
            {
              "description": "Corosync `token` timeout is set to the correct value",
              "expectations": [
                {
                  "expression": "fencing_configured == true",
                  "failure_message": "Fencing is not configured for all nodes.",
                  "name": "fencing_enabled",
                  "type": "expect"
                }
              ],
              "facts": [
                {
                  "argument": "",
                  "gatherer": "cluster_node_gatherer",
                  "name": "node_count"
                }
              ],
              "group": "Corosync",
              "id": "156F64",
              "metadata": {
                "category": "ha",
                "impact": "critical"
              },
              "name": "Corosync `token` timeout",
              "premium": false,
              "remediation": "The value of the Corosync `token` timeout is not set as recommended. Adjust the corosync `token` timeout as recommended...",
              "severity": "critical",
              "values": [
                {
                  "conditions": [
                    {
                      "expression": "node_count > 1",
                      "value": true
                    }
                  ],
                  "default": false,
                  "name": "fencing_configured"
                }
              ],
              "when": "node_count > 0"
            }
          ]
        },
        "properties": {
          "items": {
            "description": "A list of catalog checks included in the response, each with metadata and configuration options.",
            "items": {
              "$ref": "#/components/schemas/v1_Check"
            },
            "type": "array"
          }
        },
        "title": "CatalogResponse",
        "type": "object"
      },
      "v1_Check": {
        "additionalProperties": false,
        "description": "Represents a single check from the catalog, including its metadata, configuration, and validation logic.",
        "example": {
          "description": "Corosync `token` timeout is set to the correct value",
          "expectations": [
            {
              "expression": "fencing_configured == true",
              "failure_message": "Fencing is not configured for all nodes.",
              "name": "fencing_enabled",
              "type": "expect"
            }
          ],
          "facts": [
            {
              "argument": "",
              "gatherer": "cluster_node_gatherer",
              "name": "node_count"
            }
          ],
          "group": "Corosync",
          "id": "156F64",
          "metadata": {
            "category": "ha",
            "impact": "critical"
          },
          "name": "Corosync `token` timeout",
          "premium": false,
          "remediation": "The value of the Corosync `token` timeout is not set as recommended. Adjust the corosync `token` timeout as recommended...",
          "severity": "critical",
          "values": [
            {
              "conditions": [
                {
                  "expression": "node_count > 1",
                  "value": true
                }
              ],
              "default": false,
              "name": "fencing_configured"
            }
          ],
          "when": "node_count > 0"
        },
        "properties": {
          "description": {
            "description": "A description of the check, outlining its purpose and expected behavior.",
            "type": "string"
          },
          "expectations": {
            "items": {
              "additionalProperties": false,
              "properties": {
                "expression": {
                  "description": "The expression to be evaluated to get the expectation result for the check.",
                  "type": "string"
                },
                "failure_message": {
                  "description": "A message returned when the check fails, providing context for troubleshooting.",
                  "nullable": true,
                  "type": "string"
                },
                "name": {
                  "description": "The name of the expectation for the check.",
                  "type": "string"
                },
                "type": {
                  "description": "The type of expectation for the check, such as expect or expect_same.",
                  "enum": [
                    "unknown",
                    "expect",
                    "expect_same"
                  ],
                  "type": "string"
                }
              },
              "required": [
                "name",
                "type",
                "expression",
                "failure_message"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "facts": {
            "items": {
              "additionalProperties": false,
              "properties": {
                "argument": {
                  "description": "The argument provided to the gatherer for fact collection.",
                  "type": "string"
                },
                "gatherer": {
                  "description": "The gatherer used to collect the fact for the check.",
                  "type": "string"
                },
                "name": {
                  "description": "The name of the fact gathered for the check.",
                  "type": "string"
                }
              },
              "required": [
                "name",
                "gatherer",
                "argument"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "group": {
            "description": "The group to which the check belongs, providing logical organization.",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of the check in the catalog.",
            "type": "string"
          },
          "metadata": {
            "description": "Metadata associated with the check, providing additional context and categorization.",
            "nullable": true,
            "type": "object"
          },
          "name": {
            "description": "The name of the check in the catalog, used for identification and reporting.",
            "type": "string"
          },
          "premium": {
            "deprecated": true,
            "description": "Check is Premium or not",
            "type": "boolean"
          },
          "remediation": {
            "description": "A remediation message for the check, providing guidance on resolving issues detected.",
            "type": "string"
          },
          "severity": {
            "description": "The severity of the check, such as critical or warning, indicating its impact.",
            "enum": [
              "critical",
              "warning"
            ],
            "type": "string"
          },
          "values": {
            "items": {
              "additionalProperties": false,
              "properties": {
                "conditions": {
                  "items": {
                    "additionalProperties": false,
                    "properties": {
                      "expression": {
                        "description": "The expression to be evaluated to use the current value for the check.",
                        "type": "string"
                      },
                      "value": {
                        "description": "The value to be used for this condition in the check.",
                        "oneOf": [
                          {
                            "type": "string"
                          },
                          {
                            "type": "number"
                          },
                          {
                            "type": "boolean"
                          }
                        ]
                      }
                    },
                    "required": [
                      "value",
                      "expression"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                },
                "default": {
                  "description": "The default value used if none of the conditions matches for the check.",
                  "oneOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "number"
                    },
                    {
                      "type": "boolean"
                    }
                  ]
                },
                "name": {
                  "description": "The name of the value used in the check.",
                  "type": "string"
                }
              },
              "required": [
                "name",
                "default",
                "conditions"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "when": {
            "description": "An expression to determine whether a check should run, allowing for conditional execution.",
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "group",
          "description",
          "remediation",
          "metadata",
          "severity",
          "facts",
          "values",
          "expectations",
          "when",
          "premium"
        ],
        "title": "Check",
        "type": "object"
      },
      "v1_CheckResult": {
        "additionalProperties": false,
        "description": "Represents the result of a check execution, including expectation evaluations and customization status.",
        "example": {
          "agents_check_results": [],
          "check_id": "156F64",
          "customized": false,
          "expectation_results": [
            {
              "failure_message": "Fencing is not configured for all nodes.",
              "name": "fencing_enabled",
              "result": true,
              "type": "expect"
            }
          ],
          "result": "critical"
        },
        "properties": {
          "agents_check_results": {
            "description": "The aggregated result of the check execution, summarizing the overall outcome for the check.",
            "example": [],
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/v1_AgentCheckResult"
                },
                {
                  "$ref": "#/components/schemas/v1_AgentCheckError"
                }
              ]
            },
            "type": "array"
          },
          "check_id": {
            "description": "The unique identifier of the check for which the result is reported.",
            "example": "156F64",
            "type": "string"
          },
          "customized": {
            "description": "Indicates whether the check has been customized for this execution, allowing for tailored validation.",
            "example": false,
            "type": "boolean"
          },
          "expectation_results": {
            "description": "List of results for each expectation evaluated during the check, providing detailed outcome information.",
            "example": [
              {
                "failure_message": "Fencing is not configured for all nodes.",
                "name": "fencing_enabled",
                "result": true,
                "type": "expect"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/v1_ExpectationResult"
            },
            "type": "array"
          },
          "result": {
            "description": "Aggregated result of the check execution. Possible values are: passing, warning, or critical.",
            "enum": [
              "passing",
              "warning",
              "critical"
            ],
            "example": "critical",
            "type": "string"
          }
        },
        "required": [
          "check_id",
          "expectation_results",
          "agents_check_results",
          "result"
        ],
        "title": "CheckResult",
        "type": "object"
      },
      "v1_CustomValue": {
        "additionalProperties": false,
        "description": "Represents a single custom value to be applied or already applied to a check, including its name and overriding value.",
        "example": {
          "name": "threshold",
          "value": 15
        },
        "properties": {
          "name": {
            "description": "The name of the specific value to be customized for the check.",
            "type": "string"
          },
          "value": {
            "description": "The overriding value to be applied to the check, replacing the default or previous value for customization purposes.",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "integer"
              },
              {
                "type": "boolean"
              }
            ]
          }
        },
        "required": [
          "name",
          "value"
        ],
        "title": "CustomValue",
        "type": "object"
      },
      "v1_CustomizationRequest": {
        "additionalProperties": false,
        "description": "Represents a request to customize a check, including the list of values to be customized for tailored validation.",
        "example": {
          "values": [
            {
              "name": "threshold",
              "value": 15
            },
            {
              "name": "enabled",
              "value": true
            }
          ]
        },
        "minProperties": 1,
        "properties": {
          "values": {
            "description": "A list of values to be customized for the check, allowing for flexible and targeted configuration.",
            "items": {
              "$ref": "#/components/schemas/v1_CustomValue"
            },
            "minItems": 1,
            "type": "array"
          }
        },
        "required": [
          "values"
        ],
        "title": "CustomizationRequest",
        "type": "object"
      },
      "v1_CustomizationResponse": {
        "additionalProperties": false,
        "description": "Represents the response for a customization operation, including the list of custom values applied to a check.",
        "example": {
          "values": [
            {
              "name": "threshold",
              "value": 15
            },
            {
              "name": "enabled",
              "value": true
            }
          ]
        },
        "properties": {
          "values": {
            "description": "A list of custom values that have been applied to the check, reflecting the customization performed.",
            "items": {
              "$ref": "#/components/schemas/v1_CustomValue"
            },
            "type": "array"
          }
        },
        "title": "CustomizationResponse",
        "type": "object"
      },
      "v1_CustomizedCheckValue": {
        "additionalProperties": false,
        "description": "Represents a single customized check value, including its name, custom value, default value, and customization status.",
        "example": {
          "custom_value": 15,
          "customizable": true,
          "default_value": 10,
          "name": "threshold"
        },
        "properties": {
          "custom_value": {
            "description": "The custom value that overrides the default value for this check, allowing for tailored validation.",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "anyOf": [
                  {
                    "type": "integer"
                  },
                  {
                    "type": "number"
                  }
                ]
              },
              {
                "type": "boolean"
              }
            ]
          },
          "customizable": {
            "description": "Indicates whether the check value can be customized for execution, allowing for tailored validation.",
            "type": "boolean"
          },
          "default_value": {
            "description": "The original value as defined by specification, resolved based on the environment.",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "anyOf": [
                  {
                    "type": "integer"
                  },
                  {
                    "type": "number"
                  }
                ]
              },
              {
                "type": "boolean"
              }
            ]
          },
          "name": {
            "description": "The name of the customized check value.",
            "type": "string"
          }
        },
        "required": [
          "name",
          "custom_value",
          "default_value",
          "customizable"
        ],
        "title": "CustomizedCheckValue",
        "type": "object"
      },
      "v1_ExecutionEnv": {
        "additionalProperties": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "integer"
            },
            {
              "type": "boolean"
            },
            {
              "items": {
                "$ref": "#/components/schemas/v1_ExecutionEnv"
              },
              "type": "array"
            }
          ]
        },
        "description": "Defines the contextual environment settings used during the current execution, allowing for flexible configuration.",
        "example": {
          "DEBUG": true,
          "MAX_RETRIES": 3,
          "VAR1": "value1"
        },
        "title": "ExecutionEnv",
        "type": "object"
      },
      "v1_ExecutionResponse": {
        "additionalProperties": false,
        "description": "Represents the details of an execution, including its status, timing, results, and associated targets. Can be running or completed.",
        "example": {
          "check_results": [
            {
              "agents_check_results": [],
              "check_id": "156F64",
              "customized": false,
              "expectation_results": [
                {
                  "failure_message": "Fencing is not configured for all nodes.",
                  "name": "fencing_enabled",
                  "result": true,
                  "type": "expect"
                }
              ],
              "result": "critical"
            }
          ],
          "completed_at": "2025-08-04T10:05:00Z",
          "critical_count": 1,
          "execution_id": "e1a2b3c4-d5f6-7890-abcd-1234567890ab",
          "group_id": "353fd789-d8ae-4a1b-a9f9-3919bd773e79",
          "passing_count": 0,
          "result": "critical",
          "started_at": "2025-08-04T10:00:00Z",
          "status": "completed",
          "targets": [
            {
              "agent_id": "a1b2c3d4-e5f6-7890-abcd-1234567890ab",
              "checks": [
                "156F64"
              ]
            }
          ],
          "timeout": [],
          "warning_count": 0
        },
        "properties": {
          "check_results": {
            "description": "The list of check results for this execution, providing detailed outcome information for each check.",
            "items": {
              "$ref": "#/components/schemas/v1_CheckResult"
            },
            "nullable": true,
            "type": "array"
          },
          "completed_at": {
            "description": "The timestamp indicating when the execution was completed, if applicable.",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "critical_count": {
            "description": "The number of checks that resulted in a critical outcome during the execution.",
            "nullable": true,
            "type": "integer"
          },
          "execution_id": {
            "description": "The unique identifier of the execution.",
            "format": "uuid",
            "type": "string"
          },
          "group_id": {
            "description": "The unique identifier of the group associated with the execution.",
            "format": "uuid",
            "type": "string"
          },
          "passing_count": {
            "description": "The number of checks that passed successfully during the execution.",
            "nullable": true,
            "type": "integer"
          },
          "result": {
            "description": "The aggregated result of the execution, summarizing the overall outcome. Unknown for running executions.",
            "enum": [
              "passing",
              "warning",
              "critical"
            ],
            "nullable": true,
            "type": "string"
          },
          "started_at": {
            "description": "The timestamp indicating when the execution started.",
            "format": "date-time",
            "type": "string"
          },
          "status": {
            "description": "The current status of the execution, indicating its progress or completion state.",
            "enum": [
              "running",
              "completed"
            ],
            "type": "string"
          },
          "targets": {
            "description": "The list of targets involved in the execution.",
            "items": {
              "$ref": "#/components/schemas/v1_Target"
            },
            "type": "array"
          },
          "timeout": {
            "description": "A list of agents that timed out during the execution process.",
            "items": {
              "description": "The unique identifier of the agent that timed out during the execution.",
              "format": "uuid",
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "warning_count": {
            "description": "The number of checks that resulted in a warning outcome during the execution.",
            "nullable": true,
            "type": "integer"
          }
        },
        "required": [
          "execution_id",
          "group_id",
          "status",
          "started_at",
          "completed_at",
          "result",
          "targets",
          "critical_count",
          "warning_count",
          "passing_count",
          "timeout",
          "check_results"
        ],
        "title": "ExecutionResponse",
        "type": "object"
      },
      "v1_ExpectationEvaluation": {
        "additionalProperties": false,
        "description": "Represents the result of evaluating an expectation, including its name, value, type, and any failure message.",
        "example": {
          "failure_message": "Fencing is not configured for all nodes.",
          "name": "fencing_enabled",
          "return_value": true,
          "type": "expect"
        },
        "properties": {
          "failure_message": {
            "description": "A message describing the failure, only available for scenarios where the expectation was not met.",
            "nullable": true,
            "type": "string"
          },
          "name": {
            "description": "The name of the expectation being evaluated.",
            "type": "string"
          },
          "return_value": {
            "description": "The value returned from the expectation evaluation, indicating the outcome of the check.",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "number"
              },
              {
                "type": "boolean"
              }
            ]
          },
          "type": {
            "description": "The type of evaluation performed for the expectation, such as expect or expect_same.",
            "enum": [
              "unknown",
              "expect",
              "expect_same"
            ],
            "type": "string"
          }
        },
        "required": [
          "name",
          "return_value",
          "type"
        ],
        "title": "ExpectationEvaluation",
        "type": "object"
      },
      "v1_ExpectationEvaluationError": {
        "additionalProperties": false,
        "description": "Indicates that an error occurred during the evaluation of an expectation, providing details for troubleshooting.",
        "example": {
          "message": "Expression evaluation failed.",
          "name": "fencing_enabled",
          "type": "evaluation_error"
        },
        "properties": {
          "message": {
            "description": "A detailed message describing the error encountered during expectation evaluation.",
            "type": "string"
          },
          "name": {
            "description": "The name of the expectation for which the error occurred.",
            "type": "string"
          },
          "type": {
            "description": "The type of error encountered during expectation evaluation, such as validation or runtime error.",
            "type": "string"
          }
        },
        "required": [
          "name",
          "message",
          "type"
        ],
        "title": "ExpectationEvaluationError",
        "type": "object"
      },
      "v1_ExpectationResult": {
        "additionalProperties": false,
        "description": "Represents the result of an expectation evaluation, including its name, result, type, and any failure message.",
        "example": {
          "failure_message": "Fencing is not configured for all nodes.",
          "name": "fencing_enabled",
          "result": true,
          "type": "expect"
        },
        "properties": {
          "failure_message": {
            "description": "A message describing the failure, only available for scenarios where the expectation was not met.",
            "nullable": true,
            "type": "string"
          },
          "name": {
            "description": "The name of the expectation being evaluated.",
            "type": "string"
          },
          "result": {
            "description": "Indicates whether the expectation condition was met during evaluation.",
            "type": "boolean"
          },
          "type": {
            "description": "The type of evaluation performed for the expectation, such as expect or expect_same.",
            "enum": [
              "unknown",
              "expect",
              "expect_same"
            ],
            "type": "string"
          }
        },
        "required": [
          "name",
          "result",
          "type"
        ],
        "title": "ExpectationResult",
        "type": "object"
      },
      "v1_Fact": {
        "additionalProperties": false,
        "description": "Represents a fact gathered during execution, including its check association and observed value.",
        "example": {
          "check_id": "156F64",
          "name": "node_count",
          "value": 3
        },
        "properties": {
          "check_id": {
            "description": "The unique identifier of the check that produced this fact during execution.",
            "type": "string"
          },
          "name": {
            "description": "The name of the fact representing the observed property or metric gathered during execution.",
            "type": "string"
          },
          "value": {
            "description": "The value of the fact as observed during execution, which may be a string, number, boolean, object, or an array of these types.",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "number"
              },
              {
                "type": "boolean"
              },
              {
                "items": {
                  "oneOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "number"
                    },
                    {
                      "type": "boolean"
                    },
                    {
                      "type": "object"
                    }
                  ]
                },
                "type": "array"
              },
              {
                "type": "object"
              }
            ]
          }
        },
        "required": [
          "check_id",
          "name",
          "value"
        ],
        "title": "Fact",
        "type": "object"
      },
      "v1_FactError": {
        "additionalProperties": false,
        "description": "Indicates that a fact could not be gathered during execution, providing details for troubleshooting data collection issues.",
        "example": {
          "check_id": "156F64",
          "message": "Timeout while gathering fact",
          "name": "node_count",
          "type": "gathering_error"
        },
        "properties": {
          "check_id": {
            "description": "The unique identifier of the check for which the fact could not be gathered.",
            "type": "string"
          },
          "message": {
            "description": "A detailed message describing the error encountered during fact gathering.",
            "type": "string"
          },
          "name": {
            "description": "The name of the fact that could not be gathered during execution.",
            "type": "string"
          },
          "type": {
            "description": "The type of error encountered during fact gathering.",
            "type": "string"
          }
        },
        "required": [
          "check_id",
          "name",
          "type",
          "message"
        ],
        "title": "FactError",
        "type": "object"
      },
      "v1_Forbidden": {
        "additionalProperties": false,
        "description": "This response indicates that access to the requested resource or operation is forbidden due to insufficient permissions.",
        "example": {
          "errors": [
            {
              "detail": "The requested operation could not be performed.",
              "title": "Forbidden"
            }
          ]
        },
        "properties": {
          "errors": {
            "example": [
              {
                "detail": "The requested operation could not be performed.",
                "title": "Forbidden"
              }
            ],
            "items": {
              "properties": {
                "detail": {
                  "example": "The requested operation could not be performed.",
                  "type": "string"
                },
                "title": {
                  "example": "Forbidden",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "title": "Forbidden",
        "type": "object"
      },
      "v1_ListExecutionsResponse": {
        "additionalProperties": false,
        "description": "Represents a paginated list of executions, including the total count and individual execution items.",
        "example": {
          "items": [
            {
              "check_results": [
                {
                  "agents_check_results": [],
                  "check_id": "156F64",
                  "customized": false,
                  "expectation_results": [
                    {
                      "failure_message": "Fencing is not configured for all nodes.",
                      "name": "fencing_enabled",
                      "result": true,
                      "type": "expect"
                    }
                  ],
                  "result": "critical"
                }
              ],
              "completed_at": "2025-08-04T10:05:00Z",
              "critical_count": 1,
              "execution_id": "e1a2b3c4-d5f6-7890-abcd-1234567890ab",
              "group_id": "353fd789-d8ae-4a1b-a9f9-3919bd773e79",
              "passing_count": 0,
              "result": "critical",
              "started_at": "2025-08-04T10:00:00Z",
              "status": "completed",
              "targets": [
                {
                  "agent_id": "a1b2c3d4-e5f6-7890-abcd-1234567890ab",
                  "checks": [
                    "156F64"
                  ]
                }
              ],
              "timeout": [],
              "warning_count": 0
            }
          ],
          "total_count": 1
        },
        "properties": {
          "items": {
            "description": "A list of execution items included in the paginated response, each representing an execution instance.",
            "items": {
              "$ref": "#/components/schemas/v1_ExecutionResponse"
            },
            "type": "array"
          },
          "total_count": {
            "description": "The total number of executions included in the paginated response.",
            "type": "integer"
          }
        },
        "title": "ListExecutionsResponse",
        "type": "object"
      },
      "v1_ListOperationsResponse": {
        "additionalProperties": false,
        "description": "Represents a paginated list of operations, including the total count and individual operation items.",
        "example": {
          "items": [
            {
              "agent_reports": [
                {
                  "agents": [
                    {
                      "agent_id": "a1b2c3d4-e5f6-7890-abcd-1234567890ab",
                      "diff": {
                        "after": "new",
                        "before": "old"
                      },
                      "error_message": "",
                      "result": "updated"
                    }
                  ],
                  "name": "First step",
                  "operator": "test@v1",
                  "predicate": "*",
                  "timeout": 60
                }
              ],
              "completed_at": "2025-08-04T10:02:00Z",
              "description": "A test operation.",
              "group_id": "353fd789-d8ae-4a1b-a9f9-3919bd773e79",
              "name": "Test operation",
              "operation": "testoperation@v1",
              "operation_id": "985edb19-cb1d-463e-81c2-53a4fa85d1fa",
              "result": "updated",
              "started_at": "2025-08-04T10:00:00Z",
              "status": "completed",
              "targets": [
                {
                  "agent_id": "a1b2c3d4-e5f6-7890-abcd-1234567890ab",
                  "arguments": {
                    "arg": "test_value"
                  }
                }
              ],
              "updated_at": "2025-08-04T10:01:00Z"
            }
          ],
          "total_count": 1
        },
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/v1_OperationResponse"
            },
            "type": "array"
          },
          "total_count": {
            "description": "The total number of operations included in the paginated response.",
            "type": "integer"
          }
        },
        "title": "ListOperationsResponse",
        "type": "object"
      },
      "v1_NotCustomizedCheckValue": {
        "additionalProperties": false,
        "description": "Represents a check value that has not been customized, including its name, default value, and customization status.",
        "example": {
          "customizable": true,
          "default_value": 10,
          "name": "threshold"
        },
        "properties": {
          "customizable": {
            "description": "Indicates whether the check value can be customized for execution, allowing for tailored validation.",
            "type": "boolean"
          },
          "default_value": {
            "description": "The original value as defined by specification, resolved based on the environment. Absent if value is not customizable.",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "anyOf": [
                  {
                    "type": "integer"
                  },
                  {
                    "type": "number"
                  }
                ]
              },
              {
                "type": "boolean"
              }
            ]
          },
          "name": {
            "description": "The name of the check value that has not been customized.",
            "type": "string"
          }
        },
        "required": [
          "name",
          "customizable"
        ],
        "title": "NotCustomizedCheckValue",
        "type": "object"
      },
      "v1_NotFound": {
        "additionalProperties": false,
        "description": "This response indicates that the requested resource could not be found in the system.",
        "example": {
          "errors": [
            {
              "detail": "The requested resource cannot be found.",
              "title": "Not Found"
            }
          ]
        },
        "properties": {
          "errors": {
            "example": [
              {
                "detail": "The requested resource cannot be found.",
                "title": "Not Found"
              }
            ],
            "items": {
              "properties": {
                "detail": {
                  "example": "The requested resource cannot be found.",
                  "type": "string"
                },
                "title": {
                  "example": "Not Found",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "title": "NotFound",
        "type": "object"
      },
      "v1_OperationResponse": {
        "additionalProperties": false,
        "description": "Represents the details of an operation, including its status, timing, results, and associated targets. Can be running or completed.",
        "example": {
          "agent_reports": [
            {
              "agents": [
                {
                  "agent_id": "a1b2c3d4-e5f6-7890-abcd-1234567890ab",
                  "diff": {
                    "after": "new",
                    "before": "old"
                  },
                  "error_message": "",
                  "result": "updated"
                }
              ],
              "name": "First step",
              "operator": "test@v1",
              "predicate": "*",
              "timeout": 60
            }
          ],
          "completed_at": "2025-08-04T10:02:00Z",
          "description": "A test operation.",
          "group_id": "353fd789-d8ae-4a1b-a9f9-3919bd773e79",
          "name": "Test operation",
          "operation": "testoperation@v1",
          "operation_id": "985edb19-cb1d-463e-81c2-53a4fa85d1fa",
          "result": "updated",
          "started_at": "2025-08-04T10:00:00Z",
          "status": "completed",
          "targets": [
            {
              "agent_id": "a1b2c3d4-e5f6-7890-abcd-1234567890ab",
              "arguments": {
                "arg": "test_value"
              }
            }
          ],
          "updated_at": "2025-08-04T10:01:00Z"
        },
        "properties": {
          "agent_reports": {
            "description": "A list of reports from agents involved in the operation, providing detailed outcome information.",
            "items": {
              "$ref": "#/components/schemas/v1_StepReport"
            },
            "nullable": true,
            "type": "array"
          },
          "completed_at": {
            "description": "The timestamp indicating when the operation was completed, if applicable.",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "description": {
            "description": "A description of the operation, outlining its purpose and expected behavior.",
            "type": "string"
          },
          "group_id": {
            "description": "The unique identifier of the group associated with the operation.",
            "format": "uuid",
            "type": "string"
          },
          "name": {
            "description": "The name of the operation being performed.",
            "type": "string"
          },
          "operation": {
            "description": "The type of operation executed, specifying the action performed.",
            "type": "string"
          },
          "operation_id": {
            "description": "The unique identifier of the operation.",
            "format": "uuid",
            "type": "string"
          },
          "result": {
            "description": "The aggregated result of the operation, summarizing the overall outcome. Unknown for running operations.",
            "enum": [
              "updated",
              "not_updated",
              "failed",
              "rolled_back",
              "timeout",
              "skipped",
              "not_executed"
            ],
            "nullable": true,
            "type": "string"
          },
          "started_at": {
            "description": "The timestamp indicating when the operation started.",
            "format": "date-time",
            "type": "string"
          },
          "status": {
            "description": "The current status of the operation, indicating its progress or completion state.",
            "enum": [
              "running",
              "completed",
              "aborted"
            ],
            "type": "string"
          },
          "targets": {
            "description": "The list of targets involved in the operation.",
            "items": {
              "$ref": "#/components/schemas/v1_OperationTarget"
            },
            "type": "array"
          },
          "updated_at": {
            "description": "The timestamp indicating when the operation was last updated.",
            "format": "date-time",
            "type": "string"
          }
        },
        "title": "OperationResponse",
        "type": "object"
      },
      "v1_OperationTarget": {
        "additionalProperties": false,
        "description": "Represents the target where operations are executed, including agent identification and arguments for execution.",
        "example": {
          "agent_id": "a1b2c3d4-e5f6-7890-abcd-1234567890ab",
          "arguments": {
            "package": "nginx",
            "version": "1.18.0"
          }
        },
        "properties": {
          "agent_id": {
            "description": "The unique identifier of the agent where the operation is executed.",
            "format": "uuid",
            "type": "string"
          },
          "arguments": {
            "additionalProperties": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "description": "A map of arguments provided for the operation execution, allowing for flexible configuration.",
            "type": "object"
          }
        },
        "required": [
          "agent_id",
          "arguments"
        ],
        "title": "OperationTarget",
        "type": "object"
      },
      "v1_SelectableChecksResponse": {
        "additionalProperties": false,
        "description": "Represents the list of selectable checks for a given execution group and environment, including details for customization and selection.",
        "example": {
          "items": [
            {
              "customizable": true,
              "customized": false,
              "description": "A sample selectable check for demonstration purposes, showing customization and selection options.",
              "group": "group_a",
              "id": "check_1",
              "name": "Check 1",
              "values": [
                {
                  "custom_value": 15,
                  "customizable": true,
                  "default_value": 10,
                  "name": "threshold"
                },
                {
                  "customizable": false,
                  "default_value": true,
                  "name": "enabled"
                }
              ]
            }
          ]
        },
        "properties": {
          "items": {
            "description": "A list of selectable checks available for execution, each with customization options and metadata.",
            "items": {
              "additionalProperties": false,
              "description": "A check that can be selected and customized for execution, providing flexibility in validation and reporting.",
              "properties": {
                "customizable": {
                  "description": "Indicates whether the check can be customized for execution, allowing for tailored validation.",
                  "type": "boolean"
                },
                "customized": {
                  "description": "Indicates whether the check has already been customized for execution, reflecting user modifications.",
                  "type": "boolean"
                },
                "description": {
                  "description": "A description of the selectable check, outlining its purpose and expected behavior.",
                  "type": "string"
                },
                "group": {
                  "description": "The group to which the selectable check belongs.",
                  "type": "string"
                },
                "id": {
                  "description": "The unique identifier of the check available for selection.",
                  "type": "string"
                },
                "name": {
                  "description": "The name of the check available for selection and customization.",
                  "type": "string"
                },
                "values": {
                  "example": [
                    {
                      "custom_value": 15,
                      "customizable": true,
                      "default_value": 10,
                      "name": "threshold"
                    },
                    {
                      "customizable": false,
                      "default_value": true,
                      "name": "enabled"
                    }
                  ],
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/v1_CustomizedCheckValue"
                      },
                      {
                        "$ref": "#/components/schemas/v1_NotCustomizedCheckValue"
                      }
                    ]
                  },
                  "type": "array"
                }
              },
              "required": [
                "id",
                "name",
                "group",
                "description",
                "values",
                "customizable",
                "customized"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "title": "SelectableChecksResponse",
        "type": "object"
      },
      "v1_StartExecutionRequest": {
        "additionalProperties": false,
        "description": "Defines the context required to run a check execution, including execution and group identifiers, targets, and environment settings.",
        "example": {
          "env": {
            "VAR1": "value1"
          },
          "execution_id": "e1a2b3c4-d5f6-7890-abcd-1234567890ab",
          "group_id": "353fd789-d8ae-4a1b-a9f9-3919bd773e79",
          "targets": [
            {
              "agent_id": "a1b2c3d4-e5f6-7890-abcd-1234567890ab",
              "checks": [
                "156F64"
              ]
            }
          ]
        },
        "properties": {
          "env": {
            "$ref": "#/components/schemas/v1_ExecutionEnv"
          },
          "execution_id": {
            "description": "The unique identifier for the execution instance.",
            "example": "e1a2b3c4-d5f6-7890-abcd-1234567890ab",
            "format": "uuid",
            "type": "string"
          },
          "group_id": {
            "description": "The unique identifier for the group associated with the execution instance.",
            "example": "353fd789-d8ae-4a1b-a9f9-3919bd773e79",
            "format": "uuid",
            "type": "string"
          },
          "target_type": {
            "description": "The type of target for the execution, specifying the nature of the execution environment.",
            "example": "host",
            "type": "string"
          },
          "targets": {
            "description": "A list of target agents involved in the execution, each specified by their unique identifier.",
            "example": [
              {
                "agent_id": "a1b2c3d4-e5f6-7890-abcd-1234567890ab",
                "checks": [
                  "156F64"
                ]
              }
            ],
            "items": {
              "$ref": "#/components/schemas/v1_Target"
            },
            "type": "array"
          }
        },
        "required": [
          "execution_id",
          "group_id",
          "targets"
        ],
        "title": "StartExecutionRequest",
        "type": "object"
      },
      "v1_StepReport": {
        "additionalProperties": false,
        "description": "Represents a report for a single step in an operation, including step details and agent outcomes.",
        "example": {
          "agents": [
            {
              "agent_id": "a1b2c3d4-e5f6-7890-abcd-1234567890ab",
              "diff": {
                "after": "present",
                "before": "absent"
              },
              "error_message": "",
              "result": "updated"
            }
          ],
          "name": "install_package",
          "operator": "equals",
          "predicate": "package_installed == true",
          "timeout": 60
        },
        "properties": {
          "agents": {
            "items": {
              "$ref": "#/components/schemas/v1_AgentReport"
            },
            "type": "array"
          },
          "name": {
            "description": "The name of the operation step being reported.",
            "type": "string"
          },
          "operator": {
            "description": "The operator used in the operation step, specifying the comparison or action performed.",
            "type": "string"
          },
          "predicate": {
            "description": "The predicate evaluated in the operation step, defining the condition for success.",
            "type": "string"
          },
          "timeout": {
            "description": "The timeout value for the operation step, specifying the maximum allowed duration in seconds.",
            "type": "integer"
          }
        },
        "required": [
          "name",
          "operator",
          "predicate",
          "timeout",
          "agents"
        ],
        "title": "StepReport",
        "type": "object"
      },
      "v1_Target": {
        "additionalProperties": false,
        "description": "Represents the target where execution facts are gathered, including agent and check associations.",
        "example": {
          "agent_id": "a1b2c3d4-e5f6-7890-abcd-1234567890ab",
          "checks": [
            "156F64"
          ]
        },
        "properties": {
          "agent_id": {
            "description": "The unique identifier of the agent for which facts are gathered during execution.",
            "format": "uuid",
            "type": "string"
          },
          "checks": {
            "items": {
              "description": "The unique identifier of the check associated with the target agent for execution.",
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "agent_id",
          "checks"
        ],
        "title": "Target",
        "type": "object"
      },
      "v1_UnprocessableEntity": {
        "additionalProperties": false,
        "description": "Error response returned when the server cannot process the request due to semantic errors, such as invalid or missing values in the payload.",
        "example": {
          "errors": [
            {
              "detail": "null value where string expected",
              "title": "Invalid value"
            }
          ]
        },
        "properties": {
          "errors": {
            "description": "A list of error objects describing why the request could not be processed, such as semantic errors or invalid values in the payload.",
            "example": [
              {
                "detail": "null value where string expected",
                "title": "Invalid value"
              }
            ],
            "items": {
              "description": "Details about a specific error encountered when the request is unprocessable, including a human-readable message and error title.",
              "properties": {
                "detail": {
                  "description": "A message describing the reason for the unprocessable entity error, such as invalid or missing values in the payload.",
                  "example": "null value where string expected",
                  "type": "string"
                },
                "source": {
                  "description": "An object containing references to the source of the error, optionally including a JSON Pointer to the associated entity in the request document.",
                  "example": {
                    "pointer": "/data/attributes/email"
                  },
                  "properties": {
                    "pointer": {
                      "description": "A pointer to the associated entity in the request document (e.g., '/data/attributes/firstName' for a specific attribute).",
                      "example": "/data/attributes/firstName",
                      "type": "string"
                    }
                  },
                  "required": [
                    "pointer"
                  ],
                  "type": "object"
                },
                "title": {
                  "description": "A short title summarizing the error encountered when the request cannot be processed due to semantic issues.",
                  "example": "Invalid value",
                  "type": "string"
                }
              },
              "required": [
                "title",
                "detail"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "errors"
        ],
        "title": "UnprocessableEntity",
        "type": "object"
      },
      "v1_Value": {
        "additionalProperties": false,
        "description": "Represents a value used in the expectations evaluation, including its name, check association, and customization status.",
        "example": {
          "check_id": "156F64",
          "customized": false,
          "name": "fencing_configured",
          "value": true
        },
        "properties": {
          "check_id": {
            "description": "The unique identifier of the check associated with the value.",
            "type": "string"
          },
          "customized": {
            "description": "Indicates whether the value has been customized for the expectations evaluation.",
            "type": "boolean"
          },
          "name": {
            "description": "The name of the value used in the expectations evaluation.",
            "type": "string"
          },
          "value": {
            "description": "The value used in the expectations evaluation, which may be a string, integer, boolean, or array.",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "number"
              },
              {
                "type": "boolean"
              }
            ]
          }
        },
        "required": [
          "check_id",
          "name",
          "value"
        ],
        "title": "Value",
        "type": "object"
      },
      "v2_AcceptedExecutionResponse": {
        "additionalProperties": false,
        "description": "This response contains the identifiers for an execution that was recently accepted by the system. These identifiers can be used to query the execution status later.",
        "example": {
          "execution_id": "e1a2b3c4-d5f6-7890-abcd-1234567890ab",
          "group_id": "353fd789-d8ae-4a1b-a9f9-3919bd773e79"
        },
        "properties": {
          "execution_id": {
            "format": "uuid",
            "type": "string"
          },
          "group_id": {
            "format": "uuid",
            "type": "string"
          }
        },
        "title": "AcceptedExecutionResponse",
        "type": "object"
      },
      "v2_AgentCheckError": {
        "additionalProperties": false,
        "description": "Indicates that some facts could not be gathered on a specific agent due to issues such as gathering failure or timeout. This error provides context for troubleshooting agent data collection problems.",
        "example": {
          "agent_id": "a1b2c3d4-e5f6-7890-abcd-1234567890ab",
          "facts": [
            {
              "check_id": "156F64",
              "name": "node_count",
              "value": 3
            },
            {
              "check_id": "156F64",
              "message": "Timeout",
              "name": "node_count",
              "type": "gathering_error"
            }
          ],
          "message": "Timeout while gathering facts",
          "type": "gathering_error"
        },
        "properties": {
          "agent_id": {
            "description": "The unique identifier of the agent involved in the error.",
            "format": "uuid",
            "type": "string"
          },
          "facts": {
            "description": "Facts gathered from the target agent, which may include errors encountered during the data collection process.",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/v2_Fact"
                },
                {
                  "$ref": "#/components/schemas/v2_FactError"
                }
              ]
            },
            "nullable": true,
            "type": "array"
          },
          "message": {
            "description": "A detailed message describing the error encountered during fact gathering on the agent.",
            "type": "string"
          },
          "type": {
            "description": "The type of error encountered during fact gathering on the agent.",
            "type": "string"
          }
        },
        "required": [
          "agent_id",
          "type",
          "message"
        ],
        "title": "AgentCheckError",
        "type": "object"
      },
      "v2_AgentCheckResult": {
        "additionalProperties": false,
        "description": "Represents the result of a check performed on a specific agent, including gathered facts and expectation evaluations.",
        "example": {
          "agent_id": "a1b2c3d4-e5f6-7890-abcd-1234567890ab",
          "expectation_evaluations": [
            {
              "name": "fencing_enabled",
              "return_value": true,
              "type": "expect"
            }
          ],
          "facts": [
            {
              "check_id": "156F64",
              "name": "node_count",
              "value": 3
            }
          ],
          "values": [
            {
              "check_id": "156F64",
              "customized": false,
              "name": "fencing_configured",
              "value": true
            }
          ]
        },
        "properties": {
          "agent_id": {
            "description": "The unique identifier of the agent for which the check was performed.",
            "format": "uuid",
            "type": "string"
          },
          "expectation_evaluations": {
            "description": "Result of the single expectation evaluation, indicating whether the expectation was met for the agent's check.",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/v2_ExpectationEvaluation"
                },
                {
                  "$ref": "#/components/schemas/v2_ExpectationEvaluationError"
                }
              ]
            },
            "type": "array"
          },
          "facts": {
            "description": "Facts gathered from the target agent during the check execution.",
            "items": {
              "$ref": "#/components/schemas/v2_Fact"
            },
            "type": "array"
          },
          "values": {
            "description": "Values resolved for the current execution, representing the computed results for the agent's check.",
            "items": {
              "$ref": "#/components/schemas/v2_Value"
            },
            "type": "array"
          }
        },
        "required": [
          "agent_id",
          "facts",
          "expectation_evaluations"
        ],
        "title": "AgentCheckResult",
        "type": "object"
      },
      "v2_BadRequest": {
        "additionalProperties": false,
        "description": "This response indicates that the request was malformed or contained invalid parameters, and could not be processed.",
        "example": {
          "errors": [
            {
              "detail": "Invalid request payload.",
              "title": "Bad Request"
            }
          ]
        },
        "properties": {
          "errors": {
            "example": [
              {
                "detail": "Invalid request payload.",
                "title": "Bad Request"
              }
            ],
            "items": {
              "properties": {
                "detail": {
                  "example": "Invalid request payload.",
                  "type": "string"
                },
                "title": {
                  "example": "Bad Request",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "title": "BadRequest",
        "type": "object"
      },
      "v2_CatalogResponse": {
        "additionalProperties": false,
        "description": "Represents the response for a catalog listing, including a list of catalog checks and their details.",
        "example": {
          "items": [
            {
              "description": "Corosync `token` timeout is set to the correct value",
              "expectations": [
                {
                  "expression": "fencing_configured == true",
                  "failure_message": "Fencing is not configured for all nodes.",
                  "name": "fencing_enabled",
                  "type": "expect"
                }
              ],
              "facts": [
                {
                  "argument": "",
                  "gatherer": "cluster_node_gatherer",
                  "name": "node_count"
                }
              ],
              "group": "Corosync",
              "id": "156F64",
              "metadata": {
                "category": "ha",
                "impact": "critical"
              },
              "name": "Corosync `token` timeout",
              "premium": false,
              "remediation": "The value of the Corosync `token` timeout is not set as recommended. Adjust the corosync `token` timeout as recommended...",
              "severity": "critical",
              "values": [
                {
                  "conditions": [
                    {
                      "expression": "node_count > 1",
                      "value": true
                    }
                  ],
                  "default": false,
                  "name": "fencing_configured"
                }
              ],
              "when": "node_count > 0"
            }
          ]
        },
        "properties": {
          "items": {
            "description": "A list of catalog checks included in the response, each with metadata and configuration options.",
            "items": {
              "$ref": "#/components/schemas/v2_Check"
            },
            "type": "array"
          }
        },
        "title": "CatalogResponse",
        "type": "object"
      },
      "v2_Check": {
        "additionalProperties": false,
        "description": "Represents a single check from the catalog, including its metadata, configuration, and validation logic.",
        "example": {
          "description": "Corosync `token` timeout is set to the correct value",
          "expectations": [
            {
              "expression": "fencing_configured == true",
              "failure_message": "Fencing is not configured for all nodes.",
              "name": "fencing_enabled",
              "type": "expect"
            }
          ],
          "facts": [
            {
              "argument": "",
              "gatherer": "cluster_node_gatherer",
              "name": "node_count"
            }
          ],
          "group": "Corosync",
          "id": "156F64",
          "metadata": {
            "category": "ha",
            "impact": "critical"
          },
          "name": "Corosync `token` timeout",
          "premium": false,
          "remediation": "The value of the Corosync `token` timeout is not set as recommended. Adjust the corosync `token` timeout as recommended...",
          "severity": "critical",
          "values": [
            {
              "conditions": [
                {
                  "expression": "node_count > 1",
                  "value": true
                }
              ],
              "default": false,
              "name": "fencing_configured"
            }
          ],
          "when": "node_count > 0"
        },
        "properties": {
          "description": {
            "description": "A description of the check, outlining its purpose and expected behavior.",
            "type": "string"
          },
          "expectations": {
            "items": {
              "additionalProperties": false,
              "properties": {
                "expression": {
                  "description": "The expression to be evaluated to get the expectation result for the check.",
                  "type": "string"
                },
                "failure_message": {
                  "description": "A message returned when the check fails, providing context for troubleshooting.",
                  "nullable": true,
                  "type": "string"
                },
                "name": {
                  "description": "The name of the expectation for the check.",
                  "type": "string"
                },
                "type": {
                  "description": "The type of expectation for the check, such as expect or expect_same.",
                  "enum": [
                    "unknown",
                    "expect",
                    "expect_same"
                  ],
                  "type": "string"
                }
              },
              "required": [
                "name",
                "type",
                "expression",
                "failure_message"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "facts": {
            "items": {
              "additionalProperties": false,
              "properties": {
                "argument": {
                  "description": "The argument provided to the gatherer for fact collection.",
                  "type": "string"
                },
                "gatherer": {
                  "description": "The gatherer used to collect the fact for the check.",
                  "type": "string"
                },
                "name": {
                  "description": "The name of the fact gathered for the check.",
                  "type": "string"
                }
              },
              "required": [
                "name",
                "gatherer",
                "argument"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "group": {
            "description": "The group to which the check belongs, providing logical organization.",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier of the check in the catalog.",
            "type": "string"
          },
          "metadata": {
            "description": "Metadata associated with the check, providing additional context and categorization.",
            "nullable": true,
            "type": "object"
          },
          "name": {
            "description": "The name of the check in the catalog, used for identification and reporting.",
            "type": "string"
          },
          "premium": {
            "deprecated": true,
            "description": "Check is Premium or not",
            "type": "boolean"
          },
          "remediation": {
            "description": "A remediation message for the check, providing guidance on resolving issues detected.",
            "type": "string"
          },
          "severity": {
            "description": "The severity of the check, such as critical or warning, indicating its impact.",
            "enum": [
              "critical",
              "warning"
            ],
            "type": "string"
          },
          "values": {
            "items": {
              "additionalProperties": false,
              "properties": {
                "conditions": {
                  "items": {
                    "additionalProperties": false,
                    "properties": {
                      "expression": {
                        "description": "The expression to be evaluated to use the current value for the check.",
                        "type": "string"
                      },
                      "value": {
                        "description": "The value to be used for this condition in the check.",
                        "oneOf": [
                          {
                            "type": "string"
                          },
                          {
                            "type": "number"
                          },
                          {
                            "type": "boolean"
                          }
                        ]
                      }
                    },
                    "required": [
                      "value",
                      "expression"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                },
                "default": {
                  "description": "The default value used if none of the conditions matches for the check.",
                  "oneOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "number"
                    },
                    {
                      "type": "boolean"
                    }
                  ]
                },
                "name": {
                  "description": "The name of the value used in the check.",
                  "type": "string"
                }
              },
              "required": [
                "name",
                "default",
                "conditions"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "when": {
            "description": "An expression to determine whether a check should run, allowing for conditional execution.",
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "group",
          "description",
          "remediation",
          "metadata",
          "severity",
          "facts",
          "values",
          "expectations",
          "when",
          "premium"
        ],
        "title": "Check",
        "type": "object"
      },
      "v2_CheckResult": {
        "additionalProperties": false,
        "description": "This object represents the result of a check execution, including expectation evaluations and agent-specific results.",
        "example": {
          "agents_check_results": [],
          "check_id": "156F64",
          "customized": false,
          "expectation_results": [
            {
              "failure_message": "Fencing is not configured for all nodes.",
              "name": "fencing_enabled",
              "result": true,
              "type": "expect"
            }
          ],
          "result": "critical"
        },
        "properties": {
          "agents_check_results": {
            "description": "An array containing the results of the check execution for each agent, including any errors encountered.",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/v2_AgentCheckResult"
                },
                {
                  "$ref": "#/components/schemas/v2_AgentCheckError"
                }
              ]
            },
            "type": "array"
          },
          "check_id": {
            "description": "A unique identifier for the check that was executed.",
            "type": "string"
          },
          "customized": {
            "description": "Specifies if the check was customized for this particular execution instance.",
            "type": "boolean"
          },
          "expectation_results": {
            "description": "An array containing the results of each expectation evaluated during the check execution.",
            "items": {
              "$ref": "#/components/schemas/v2_ExpectationResult"
            },
            "type": "array"
          },
          "result": {
            "description": "The overall result of the check execution, which may be passing, warning, or critical.",
            "enum": [
              "passing",
              "warning",
              "critical"
            ],
            "type": "string"
          }
        },
        "required": [
          "check_id",
          "expectation_results",
          "agents_check_results",
          "result"
        ],
        "title": "CheckResult",
        "type": "object"
      },
      "v2_ExecutionEnv": {
        "additionalProperties": {
          "anyOf": [
            {
              "type": "integer"
            },
            {
              "type": "boolean"
            },
            {
              "type": "string"
            },
            {
              "items": {
                "$ref": "#/components/schemas/v2_ExecutionEnv"
              },
              "type": "array"
            }
          ]
        },
        "description": "Defines the contextual environment settings used during the current execution, allowing for flexible configuration.",
        "example": {
          "DEBUG": true,
          "MAX_RETRIES": 3,
          "VAR1": "value1"
        },
        "title": "ExecutionEnv",
        "type": "object"
      },
      "v2_ExecutionResponse": {
        "additionalProperties": false,
        "description": "This object represents the details and status of an execution, which may be running or completed.",
        "example": {
          "check_results": [
            {
              "agents_check_results": [],
              "check_id": "156F64",
              "customized": false,
              "expectation_results": [
                {
                  "failure_message": "Fencing is not configured for all nodes.",
                  "name": "fencing_enabled",
                  "result": true,
                  "type": "expect"
                }
              ],
              "result": "critical"
            }
          ],
          "completed_at": "2025-08-04T10:05:00Z",
          "critical_count": 1,
          "execution_id": "e1a2b3c4-d5f6-7890-abcd-1234567890ab",
          "group_id": "353fd789-d8ae-4a1b-a9f9-3919bd773e79",
          "passing_count": 0,
          "result": "critical",
          "started_at": "2025-08-04T10:00:00Z",
          "status": "completed",
          "targets": [
            {
              "agent_id": "a1b2c3d4-e5f6-7890-abcd-1234567890ab",
              "checks": [
                "156F64"
              ]
            }
          ],
          "timeout": [],
          "warning_count": 0
        },
        "properties": {
          "check_results": {
            "description": "An array containing the results of each check performed during the execution.",
            "items": {
              "$ref": "#/components/schemas/v2_CheckResult"
            },
            "nullable": true,
            "type": "array"
          },
          "completed_at": {
            "description": "The timestamp when the execution was completed, if available.",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "critical_count": {
            "description": "The number of checks that resulted in a critical status during the execution.",
            "nullable": true,
            "type": "integer"
          },
          "execution_id": {
            "description": "A unique identifier for the execution instance.",
            "format": "uuid",
            "type": "string"
          },
          "group_id": {
            "description": "A unique identifier for the group associated with this execution instance.",
            "format": "uuid",
            "type": "string"
          },
          "passing_count": {
            "description": "The number of checks that resulted in a passing status during the execution.",
            "nullable": true,
            "type": "integer"
          },
          "result": {
            "description": "The overall result of the execution, which may be unknown if the execution is still running.",
            "enum": [
              "passing",
              "warning",
              "critical"
            ],
            "nullable": true,
            "type": "string"
          },
          "started_at": {
            "description": "The timestamp when the execution started.",
            "format": "date-time",
            "type": "string"
          },
          "status": {
            "description": "Indicates whether the execution is currently running or has been completed.",
            "enum": [
              "running",
              "completed"
            ],
            "type": "string"
          },
          "targets": {
            "description": "An array of agents that participated in the execution process.",
            "items": {
              "$ref": "#/components/schemas/v2_Target"
            },
            "type": "array"
          },
          "timeout": {
            "description": "An array of agents that did not complete the execution within the expected time frame.",
            "items": {
              "description": "A unique identifier for the agent that timed out during execution.",
              "format": "uuid",
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "warning_count": {
            "description": "The number of checks that resulted in a warning status during the execution.",
            "nullable": true,
            "type": "integer"
          }
        },
        "required": [
          "execution_id",
          "group_id",
          "status",
          "started_at",
          "completed_at",
          "result",
          "targets",
          "critical_count",
          "warning_count",
          "passing_count",
          "timeout",
          "check_results"
        ],
        "title": "ExecutionResponse",
        "type": "object"
      },
      "v2_ExpectationEvaluation": {
        "additionalProperties": false,
        "description": "Represents the result of evaluating an expectation, including its name, value, type, and any failure message.",
        "example": {
          "failure_message": "Fencing is not configured for all nodes.",
          "name": "fencing_enabled",
          "return_value": true,
          "type": "expect"
        },
        "properties": {
          "failure_message": {
            "description": "A message describing the failure, only available for scenarios where the expectation was not met.",
            "nullable": true,
            "type": "string"
          },
          "name": {
            "description": "The name of the expectation being evaluated.",
            "type": "string"
          },
          "return_value": {
            "description": "The value returned from the expectation evaluation, indicating the outcome of the check.",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "number"
              },
              {
                "type": "boolean"
              }
            ]
          },
          "type": {
            "description": "The type of evaluation performed for the expectation, such as expect or expect_same.",
            "enum": [
              "unknown",
              "expect",
              "expect_same"
            ],
            "type": "string"
          }
        },
        "required": [
          "name",
          "return_value",
          "type"
        ],
        "title": "ExpectationEvaluation",
        "type": "object"
      },
      "v2_ExpectationEvaluationError": {
        "additionalProperties": false,
        "description": "Indicates that an error occurred during the evaluation of an expectation, providing details for troubleshooting.",
        "example": {
          "message": "Expression evaluation failed.",
          "name": "fencing_enabled",
          "type": "evaluation_error"
        },
        "properties": {
          "message": {
            "description": "A detailed message describing the error encountered during expectation evaluation.",
            "type": "string"
          },
          "name": {
            "description": "The name of the expectation for which the error occurred.",
            "type": "string"
          },
          "type": {
            "description": "The type of error encountered during expectation evaluation, such as validation or runtime error.",
            "type": "string"
          }
        },
        "required": [
          "name",
          "message",
          "type"
        ],
        "title": "ExpectationEvaluationError",
        "type": "object"
      },
      "v2_ExpectationResult": {
        "additionalProperties": false,
        "description": "This object describes the outcome of an expectation evaluation during a check execution.",
        "example": {
          "failure_message": "Fencing is not configured for all nodes.",
          "name": "fencing_enabled",
          "result": true,
          "type": "expect"
        },
        "properties": {
          "failure_message": {
            "description": "A message describing the reason for failure when the expectation is not met. Only available for certain scenarios.",
            "nullable": true,
            "type": "string"
          },
          "name": {
            "description": "A label that identifies the expectation being evaluated in the check.",
            "type": "string"
          },
          "result": {
            "description": "The outcome value produced by evaluating the expectation condition during the check execution.",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "number"
              },
              {
                "type": "boolean"
              },
              {
                "enum": [
                  "passing",
                  "warning",
                  "critical"
                ],
                "type": "string"
              }
            ]
          },
          "type": {
            "description": "Specifies the type of evaluation performed for the expectation in the check execution.",
            "enum": [
              "unknown",
              "expect",
              "expect_same",
              "expect_enum"
            ],
            "type": "string"
          }
        },
        "required": [
          "name",
          "result",
          "type"
        ],
        "title": "ExpectationResult",
        "type": "object"
      },
      "v2_Fact": {
        "additionalProperties": false,
        "description": "Represents a fact gathered during execution, including its check association and observed value.",
        "example": {
          "check_id": "156F64",
          "name": "node_count",
          "value": 3
        },
        "properties": {
          "check_id": {
            "description": "The unique identifier of the check that produced this fact during execution.",
            "type": "string"
          },
          "name": {
            "description": "The name of the fact representing the observed property or metric gathered during execution.",
            "type": "string"
          },
          "value": {
            "description": "The value of the fact as observed during execution, which may be a string, number, boolean, object, or an array of these types.",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "number"
              },
              {
                "type": "boolean"
              },
              {
                "items": {
                  "oneOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "number"
                    },
                    {
                      "type": "boolean"
                    },
                    {
                      "type": "object"
                    }
                  ]
                },
                "type": "array"
              },
              {
                "type": "object"
              }
            ]
          }
        },
        "required": [
          "check_id",
          "name",
          "value"
        ],
        "title": "Fact",
        "type": "object"
      },
      "v2_FactError": {
        "additionalProperties": false,
        "description": "Indicates that a fact could not be gathered during execution, providing details for troubleshooting data collection issues.",
        "example": {
          "check_id": "156F64",
          "message": "Timeout while gathering fact",
          "name": "node_count",
          "type": "gathering_error"
        },
        "properties": {
          "check_id": {
            "description": "The unique identifier of the check for which the fact could not be gathered.",
            "type": "string"
          },
          "message": {
            "description": "A detailed message describing the error encountered during fact gathering.",
            "type": "string"
          },
          "name": {
            "description": "The name of the fact that could not be gathered during execution.",
            "type": "string"
          },
          "type": {
            "description": "The type of error encountered during fact gathering.",
            "type": "string"
          }
        },
        "required": [
          "check_id",
          "name",
          "type",
          "message"
        ],
        "title": "FactError",
        "type": "object"
      },
      "v2_ListExecutionsResponse": {
        "additionalProperties": false,
        "description": "This schema represents a paginated response containing multiple execution records.",
        "example": {
          "items": [
            {
              "check_results": [
                {
                  "agents_check_results": [],
                  "check_id": "156F64",
                  "customized": false,
                  "expectation_results": [
                    {
                      "failure_message": "Fencing is not configured for all nodes.",
                      "name": "fencing_enabled",
                      "result": true,
                      "type": "expect"
                    }
                  ],
                  "result": "critical"
                }
              ],
              "completed_at": "2025-08-04T10:05:00Z",
              "critical_count": 1,
              "execution_id": "e1a2b3c4-d5f6-7890-abcd-1234567890ab",
              "group_id": "353fd789-d8ae-4a1b-a9f9-3919bd773e79",
              "passing_count": 0,
              "result": "critical",
              "started_at": "2025-08-04T10:00:00Z",
              "status": "completed",
              "targets": [
                {
                  "agent_id": "a1b2c3d4-e5f6-7890-abcd-1234567890ab",
                  "checks": [
                    "156F64"
                  ]
                }
              ],
              "timeout": [],
              "warning_count": 0
            }
          ],
          "total_count": 1
        },
        "properties": {
          "items": {
            "description": "An array containing the execution items included in this response page.",
            "items": {
              "$ref": "#/components/schemas/v2_ExecutionResponse"
            },
            "type": "array"
          },
          "total_count": {
            "description": "The total number of executions available in the system. This value is used for pagination purposes.",
            "type": "integer"
          }
        },
        "title": "ListExecutionsResponse",
        "type": "object"
      },
      "v2_NotFound": {
        "additionalProperties": false,
        "description": "This response indicates that the requested resource could not be found in the system.",
        "example": {
          "errors": [
            {
              "detail": "The requested resource cannot be found.",
              "title": "Not Found"
            }
          ]
        },
        "properties": {
          "errors": {
            "example": [
              {
                "detail": "The requested resource cannot be found.",
                "title": "Not Found"
              }
            ],
            "items": {
              "properties": {
                "detail": {
                  "example": "The requested resource cannot be found.",
                  "type": "string"
                },
                "title": {
                  "example": "Not Found",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "title": "NotFound",
        "type": "object"
      },
      "v2_StartExecutionRequest": {
        "additionalProperties": false,
        "description": "This schema defines the context and parameters required to start a check execution.",
        "example": {
          "env": {
            "VAR1": "value1"
          },
          "execution_id": "e1a2b3c4-d5f6-7890-abcd-1234567890ab",
          "group_id": "353fd789-d8ae-4a1b-a9f9-3919bd773e79",
          "targets": [
            {
              "agent_id": "a1b2c3d4-e5f6-7890-abcd-1234567890ab",
              "checks": [
                "156F64"
              ]
            }
          ]
        },
        "properties": {
          "env": {
            "$ref": "#/components/schemas/v2_ExecutionEnv"
          },
          "execution_id": {
            "description": "A unique identifier for the execution instance.",
            "format": "uuid",
            "type": "string"
          },
          "group_id": {
            "description": "A unique identifier for the group associated with this execution instance.",
            "format": "uuid",
            "type": "string"
          },
          "target_type": {
            "description": "Specifies the type of target for the execution process.",
            "type": "string"
          },
          "targets": {
            "description": "An array of agents that will participate in the execution process.",
            "items": {
              "$ref": "#/components/schemas/v2_Target"
            },
            "type": "array"
          }
        },
        "required": [
          "execution_id",
          "group_id",
          "targets"
        ],
        "title": "StartExecutionRequest",
        "type": "object"
      },
      "v2_Target": {
        "additionalProperties": false,
        "description": "Represents the target where execution facts are gathered, including agent and check associations.",
        "example": {
          "agent_id": "a1b2c3d4-e5f6-7890-abcd-1234567890ab",
          "checks": [
            "156F64"
          ]
        },
        "properties": {
          "agent_id": {
            "description": "The unique identifier of the agent for which facts are gathered during execution.",
            "format": "uuid",
            "type": "string"
          },
          "checks": {
            "items": {
              "description": "The unique identifier of the check associated with the target agent for execution.",
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "agent_id",
          "checks"
        ],
        "title": "Target",
        "type": "object"
      },
      "v2_UnprocessableEntity": {
        "additionalProperties": false,
        "description": "Error response returned when the server cannot process the request due to semantic errors, such as invalid or missing values in the payload.",
        "example": {
          "errors": [
            {
              "detail": "null value where string expected",
              "title": "Invalid value"
            }
          ]
        },
        "properties": {
          "errors": {
            "description": "A list of error objects describing why the request could not be processed, such as semantic errors or invalid values in the payload.",
            "example": [
              {
                "detail": "null value where string expected",
                "title": "Invalid value"
              }
            ],
            "items": {
              "description": "Details about a specific error encountered when the request is unprocessable, including a human-readable message and error title.",
              "properties": {
                "detail": {
                  "description": "A message describing the reason for the unprocessable entity error, such as invalid or missing values in the payload.",
                  "example": "null value where string expected",
                  "type": "string"
                },
                "source": {
                  "description": "An object containing references to the source of the error, optionally including a JSON Pointer to the associated entity in the request document.",
                  "example": {
                    "pointer": "/data/attributes/email"
                  },
                  "properties": {
                    "pointer": {
                      "description": "A pointer to the associated entity in the request document (e.g., '/data/attributes/firstName' for a specific attribute).",
                      "example": "/data/attributes/firstName",
                      "type": "string"
                    }
                  },
                  "required": [
                    "pointer"
                  ],
                  "type": "object"
                },
                "title": {
                  "description": "A short title summarizing the error encountered when the request cannot be processed due to semantic issues.",
                  "example": "Invalid value",
                  "type": "string"
                }
              },
              "required": [
                "title",
                "detail"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "errors"
        ],
        "title": "UnprocessableEntity",
        "type": "object"
      },
      "v2_Value": {
        "additionalProperties": false,
        "description": "Represents a value used in the expectations evaluation, including its name, check association, and customization status.",
        "example": {
          "check_id": "156F64",
          "customized": false,
          "name": "fencing_configured",
          "value": true
        },
        "properties": {
          "check_id": {
            "description": "The unique identifier of the check associated with the value.",
            "type": "string"
          },
          "customized": {
            "description": "Indicates whether the value has been customized for the expectations evaluation.",
            "type": "boolean"
          },
          "name": {
            "description": "The name of the value used in the expectations evaluation.",
            "type": "string"
          },
          "value": {
            "description": "The value used in the expectations evaluation, which may be a string, integer, boolean, or array.",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "number"
              },
              {
                "type": "boolean"
              }
            ]
          }
        },
        "required": [
          "check_id",
          "name",
          "value"
        ],
        "title": "Value",
        "type": "object"
      },
      "v3_CatalogResponse": {
        "additionalProperties": false,
        "description": "This object represents the response for a catalog listing, including all available checks.",
        "example": {
          "items": [
            {
              "customization_disabled": true,
              "description": "Corosync `token` timeout is set to the correct value",
              "expectations": [
                {
                  "expression": "fencing_configured == true",
                  "failure_message": "Fencing is not configured for all nodes.",
                  "name": "fencing_enabled",
                  "type": "expect_enum",
                  "warning_message": "Warning: fencing may not be fully configured."
                }
              ],
              "facts": [
                {
                  "argument": "",
                  "gatherer": "cluster_node_gatherer",
                  "name": "node_count"
                }
              ],
              "group": "Corosync",
              "id": "156F64",
              "metadata": {
                "category": "ha",
                "impact": "critical"
              },
              "name": "Corosync `token` timeout",
              "premium": false,
              "remediation": "The value of the Corosync `token` timeout is not set as recommended. Adjust the corosync `token` timeout as recommended...",
              "severity": "critical",
              "values": [
                {
                  "conditions": [
                    {
                      "expression": "node_count > 1",
                      "value": true
                    }
                  ],
                  "customization_disabled": false,
                  "default": false,
                  "name": "fencing_configured"
                }
              ],
              "when": "node_count > 0"
            }
          ]
        },
        "properties": {
          "items": {
            "description": "An array containing all catalog checks included in the response.",
            "items": {
              "$ref": "#/components/schemas/v3_Check"
            },
            "type": "array"
          }
        },
        "title": "CatalogResponse",
        "type": "object"
      },
      "v3_Check": {
        "additionalProperties": false,
        "description": "This object represents a single check from the catalog, including its configuration, metadata, and validation logic.",
        "example": {
          "customization_disabled": false,
          "description": "Corosync `token` timeout is set to the correct value",
          "expectations": [
            {
              "expression": "fencing_configured == true",
              "failure_message": "Fencing is not configured for all nodes.",
              "name": "fencing_enabled",
              "type": "expect_enum",
              "warning_message": "Warning: fencing may not be fully configured."
            }
          ],
          "facts": [
            {
              "argument": "",
              "gatherer": "cluster_node_gatherer",
              "name": "node_count"
            }
          ],
          "group": "Corosync",
          "id": "156F64",
          "metadata": {
            "category": "ha",
            "impact": "critical"
          },
          "name": "Corosync `token` timeout",
          "premium": false,
          "remediation": "The value of the Corosync `token` timeout is not set as recommended. Adjust the corosync `token` timeout as recommended...",
          "severity": "critical",
          "values": [
            {
              "conditions": [
                {
                  "expression": "node_count > 1",
                  "value": true
                }
              ],
              "customization_disabled": false,
              "default": false,
              "name": "fencing_configured"
            }
          ],
          "when": "node_count > 0"
        },
        "properties": {
          "customization_disabled": {
            "description": "Whether the check is customizable or not",
            "type": "boolean"
          },
          "description": {
            "description": "A detailed explanation of the check, outlining its purpose and expected behavior.",
            "type": "string"
          },
          "expectations": {
            "items": {
              "additionalProperties": false,
              "properties": {
                "expression": {
                  "description": "The expression to be evaluated to get the expectation result for the check.",
                  "type": "string"
                },
                "failure_message": {
                  "description": "A message returned when the check fails, providing context for troubleshooting.",
                  "nullable": true,
                  "type": "string"
                },
                "name": {
                  "description": "A label that identifies the expectation for the check.",
                  "type": "string"
                },
                "type": {
                  "description": "Specifies the type of expectation for the check, such as expect or expect_same.",
                  "enum": [
                    "unknown",
                    "expect",
                    "expect_same",
                    "expect_enum"
                  ],
                  "type": "string"
                },
                "warning_message": {
                  "description": "Message returned when the check return value is warning. Only available for `expect_enum` expectations",
                  "nullable": true,
                  "type": "string"
                }
              },
              "required": [
                "name",
                "type",
                "expression",
                "failure_message"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "facts": {
            "items": {
              "additionalProperties": false,
              "properties": {
                "argument": {
                  "description": "The argument provided to the gatherer for fact collection.",
                  "type": "string"
                },
                "gatherer": {
                  "description": "The gatherer used to collect the fact for the check.",
                  "type": "string"
                },
                "name": {
                  "description": "The label for the fact gathered for the check.",
                  "type": "string"
                }
              },
              "required": [
                "name",
                "gatherer",
                "argument"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "group": {
            "description": "The logical group to which the check belongs, used for organization and filtering.",
            "type": "string"
          },
          "id": {
            "description": "A unique identifier for the check in the catalog.",
            "type": "string"
          },
          "metadata": {
            "description": "Additional metadata associated with the check, providing context and categorization.",
            "nullable": true,
            "type": "object"
          },
          "name": {
            "description": "The name assigned to the check for identification and reporting purposes.",
            "type": "string"
          },
          "premium": {
            "deprecated": true,
            "description": "Check is Premium or not",
            "type": "boolean"
          },
          "remediation": {
            "description": "Guidance or steps to resolve issues detected by the check, helping users remediate problems.",
            "type": "string"
          },
          "severity": {
            "description": "Indicates the severity level of the check, such as critical or warning, to help prioritize remediation.",
            "enum": [
              "critical",
              "warning"
            ],
            "type": "string"
          },
          "values": {
            "items": {
              "additionalProperties": false,
              "properties": {
                "conditions": {
                  "items": {
                    "additionalProperties": false,
                    "properties": {
                      "expression": {
                        "description": "The expression to be evaluated to use the current value for the check.",
                        "type": "string"
                      },
                      "value": {
                        "description": "The value to be used for this condition in the check.",
                        "oneOf": [
                          {
                            "type": "string"
                          },
                          {
                            "type": "number"
                          },
                          {
                            "type": "boolean"
                          }
                        ]
                      }
                    },
                    "required": [
                      "value",
                      "expression"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                },
                "customization_disabled": {
                  "description": "Indicates whether the value is customizable or not for this check.",
                  "type": "boolean"
                },
                "default": {
                  "description": "The default value used if none of the conditions matches for the check.",
                  "oneOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "number"
                    },
                    {
                      "type": "boolean"
                    }
                  ]
                },
                "name": {
                  "description": "The label for the value used in the check.",
                  "type": "string"
                }
              },
              "required": [
                "name",
                "default",
                "conditions",
                "customization_disabled"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "when": {
            "description": "Expression to determine whether a check should run",
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "group",
          "description",
          "remediation",
          "metadata",
          "severity",
          "facts",
          "values",
          "expectations",
          "when",
          "premium",
          "customization_disabled"
        ],
        "title": "Check",
        "type": "object"
      },
      "v3_ExecutionEnv": {
        "additionalProperties": {
          "anyOf": [
            {
              "type": "integer"
            },
            {
              "type": "boolean"
            },
            {
              "type": "string"
            },
            {
              "items": {
                "$ref": "#/components/schemas/v3_ExecutionEnv"
              },
              "type": "array"
            }
          ]
        },
        "description": "Defines the contextual environment settings used during the current execution, allowing for flexible configuration.",
        "example": {
          "DEBUG": true,
          "MAX_RETRIES": 3,
          "VAR1": "value1"
        },
        "title": "ExecutionEnv",
        "type": "object"
      },
      "v3_UnprocessableEntity": {
        "additionalProperties": false,
        "description": "Error response returned when the server cannot process the request due to semantic errors, such as invalid or missing values in the payload.",
        "example": {
          "errors": [
            {
              "detail": "null value where string expected",
              "title": "Invalid value"
            }
          ]
        },
        "properties": {
          "errors": {
            "description": "A list of error objects describing why the request could not be processed, such as semantic errors or invalid values in the payload.",
            "example": [
              {
                "detail": "null value where string expected",
                "title": "Invalid value"
              }
            ],
            "items": {
              "description": "Details about a specific error encountered when the request is unprocessable, including a human-readable message and error title.",
              "properties": {
                "detail": {
                  "description": "A message describing the reason for the unprocessable entity error, such as invalid or missing values in the payload.",
                  "example": "null value where string expected",
                  "type": "string"
                },
                "source": {
                  "description": "An object containing references to the source of the error, optionally including a JSON Pointer to the associated entity in the request document.",
                  "example": {
                    "pointer": "/data/attributes/email"
                  },
                  "properties": {
                    "pointer": {
                      "description": "A pointer to the associated entity in the request document (e.g., '/data/attributes/firstName' for a specific attribute).",
                      "example": "/data/attributes/firstName",
                      "type": "string"
                    }
                  },
                  "required": [
                    "pointer"
                  ],
                  "type": "object"
                },
                "title": {
                  "description": "A short title summarizing the error encountered when the request cannot be processed due to semantic issues.",
                  "example": "Invalid value",
                  "type": "string"
                }
              },
              "required": [
                "title",
                "detail"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "errors"
        ],
        "title": "UnprocessableEntity",
        "type": "object"
      }
    },
    "securitySchemes": {
      "authorization": {
        "description": "This security scheme uses Bearer token authentication for API access. Please provide a valid token in the Authorization header.",
        "scheme": "bearer",
        "type": "http"
      }
    }
  }
}
